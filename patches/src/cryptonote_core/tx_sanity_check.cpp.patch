diff --git a/src/cryptonote_core/tx_sanity_check.cpp b/src/cryptonote_core/tx_sanity_check.cpp
index e99982def..4594b9dc9 100644
--- a/src/cryptonote_core/tx_sanity_check.cpp
+++ b/src/cryptonote_core/tx_sanity_check.cpp
@@ -39,7 +39,7 @@
 namespace cryptonote
 {
 
-bool tx_sanity_check(const cryptonote::blobdata &tx_blob, uint64_t rct_outs_available)
+bool tx_sanity_check(const cryptonote::blobdata &tx_blob, uint64_t rct_outs_available, uint64_t current_height)
 {
   cryptonote::transaction tx;
 
@@ -54,20 +54,55 @@ bool tx_sanity_check(const cryptonote::blobdata &tx_blob, uint64_t rct_outs_avai
     MERROR("Transaction is coinbase");
     return false;
   }
+
+   if ((tx.version >= OFFSHORE_TRANSACTION_VERSION) && (tx.pricing_record_height > 0)) {
+    // Validate that pricing record is not too old
+    if ((current_height - PRICING_RECORD_VALID_BLOCKS) > tx.pricing_record_height) {
+      MERROR("Offshore transaction references a pricing record that is too old - rejected");
+      return false;
+    }
+  } 
+  
   std::set<uint64_t> rct_indices;
   size_t n_indices = 0;
 
   for (const auto &txin : tx.vin)
   {
-    if (txin.type() != typeid(cryptonote::txin_to_key))
-      continue;
-    const cryptonote::txin_to_key &in_to_key = boost::get<cryptonote::txin_to_key>(txin);
-    if (in_to_key.amount != 0)
+    if (txin.type() == typeid(cryptonote::txin_to_key)) {
+      const cryptonote::txin_to_key &in_to_key = boost::get<cryptonote::txin_to_key>(txin);
+      if (in_to_key.amount != 0)
+	continue;
+      const std::vector<uint64_t> absolute = cryptonote::relative_output_offsets_to_absolute(in_to_key.key_offsets);
+      for (uint64_t offset: absolute)
+	rct_indices.insert(offset);
+      n_indices += in_to_key.key_offsets.size();
+    } else if (txin.type() == typeid(cryptonote::txin_offshore)) {
+      const cryptonote::txin_offshore &in_to_key = boost::get<cryptonote::txin_offshore>(txin);
+      if (in_to_key.amount != 0)
+	continue;
+      const std::vector<uint64_t> absolute = cryptonote::relative_output_offsets_to_absolute(in_to_key.key_offsets);
+      for (uint64_t offset: absolute)
+	rct_indices.insert(offset);
+      n_indices += in_to_key.key_offsets.size();
+    } else if (txin.type() == typeid(cryptonote::txin_onshore)) {
+      const cryptonote::txin_onshore &in_to_key = boost::get<cryptonote::txin_onshore>(txin);
+      if (in_to_key.amount != 0)
+	continue;
+      const std::vector<uint64_t> absolute = cryptonote::relative_output_offsets_to_absolute(in_to_key.key_offsets);
+      for (uint64_t offset: absolute)
+	rct_indices.insert(offset);
+      n_indices += in_to_key.key_offsets.size();
+    } else if (txin.type() == typeid(cryptonote::txin_xasset)) {
+      const cryptonote::txin_xasset &in_to_key = boost::get<cryptonote::txin_xasset>(txin);
+      if (in_to_key.amount != 0)
+	continue;
+      const std::vector<uint64_t> absolute = cryptonote::relative_output_offsets_to_absolute(in_to_key.key_offsets);
+      for (uint64_t offset: absolute)
+	rct_indices.insert(offset);
+      n_indices += in_to_key.key_offsets.size();
+    } else {
       continue;
-    const std::vector<uint64_t> absolute = cryptonote::relative_output_offsets_to_absolute(in_to_key.key_offsets);
-    for (uint64_t offset: absolute)
-      rct_indices.insert(offset);
-    n_indices += in_to_key.key_offsets.size();
+    }
   }
 
   return tx_sanity_check(rct_indices, n_indices, rct_outs_available);
